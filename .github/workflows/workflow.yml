name: workflow.yml

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

permissions:
  contents: read
  packages: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_from_maven.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
          server-id: gh-big-decimal,gh-big-validation
          server-username: vodobryshkin
          server-password: ${{ secrets.GH_PACKAGES_TOKEN }}

      - name: Pre-seed Maven local repo with GH Packages
        env:
          GHP_USER: vodobryshkin
          GHP_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          set -eux

          # 1) ru.ifmo.se:bigdecimalgm:1.0.1
          BASE1="https://maven.pkg.github.com/vodobryshkin/big-decimal-lib/ru/ifmo/se/bigdecimalgm/1.0.1"
          curl -fL -u "${GHP_USER}:${GHP_TOKEN}" -o bigdecimalgm-1.0.1.pom  "${BASE1}/bigdecimalgm-1.0.1.pom"
          curl -fL -u "${GHP_USER}:${GHP_TOKEN}" -o bigdecimalgm-1.0.1.jar  "${BASE1}/bigdecimalgm-1.0.1.jar"
          mvn -ntp install:install-file \
            -DgroupId=ru.ifmo.se \
            -DartifactId=bigdecimalgm \
            -Dversion=1.0.1 \
            -Dpackaging=jar \
            -Dfile=bigdecimalgm-1.0.1.jar \
            -DpomFile=bigdecimalgm-1.0.1.pom

          # 2) ru.ifmo.se:coordinates-validation-web-labs:2.1.0
          BASE2="https://maven.pkg.github.com/vodobryshkin/big-validation-lib/ru/ifmo/se/coordinates-validation-web-labs/2.1.0"
          curl -fL -u "${GHP_USER}:${GHP_TOKEN}" -o coordinates-validation-web-labs-2.1.0.pom "${BASE2}/coordinates-validation-web-labs-2.1.0.pom"
          curl -fL -u "${GHP_USER}:${GHP_TOKEN}" -o coordinates-validation-web-labs-2.1.0.jar "${BASE2}/coordinates-validation-web-labs-2.1.0.jar"
          mvn -ntp install:install-file \
            -DgroupId=ru.ifmo.se \
            -DartifactId=coordinates-validation-web-labs \
            -Dversion=2.1.0 \
            -Dpackaging=jar \
            -Dfile=coordinates-validation-web-labs-2.1.0.jar \
            -DpomFile=coordinates-validation-web-labs-2.1.0.pom

      - name: Read Maven project.version
        id: version_from_maven
        run: |
          V=$(mvn -q -ntp -DforceStdout help:evaluate -Dexpression=project.version | tr -d '\r')
          echo "version=$V" >> "$GITHUB_OUTPUT"
          echo "Resolved Maven version: $V"

      - name: Build, test and coverage with Maven
        run: mvn -B -U clean verify

      - name: Copy WAR to predictable name
        run: |
          mkdir -p dist
          WAR=$(ls -1 target/*.war | head -n1)
          cp "$WAR" dist/app.war

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-war
          path: dist/app.war
          if-no-files-found: error

  push_image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-war
          path: .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.REGISTRY_USERNAME }}/vodobryshkin-lab2-dop:${{ needs.build.outputs.version }}
            docker.io/${{ secrets.REGISTRY_USERNAME }}/vodobryshkin-lab2-dop:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build, push_image]
    steps:
      - name: Deploy to server (with SSH)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || '22' }}
          script: |
            set -euo pipefail

            IMAGE_VER="${{ needs.build.outputs.version }}"
            [ -n "$IMAGE_VER" ] || { echo "ERROR: version is empty"; exit 1; }

            IMAGE="docker.io/${{ secrets.REGISTRY_USERNAME }}/vodobryshkin-lab2-dop:${IMAGE_VER}"
            CONTAINER_NAME="mylab"

            echo "Using image: $IMAGE"
            docker pull "$IMAGE"

            docker stop "$CONTAINER_NAME" || true
            docker rm "$CONTAINER_NAME" || true

            docker run -d --name "$CONTAINER_NAME" --restart unless-stopped \
              -p 127.0.0.1:8080:8080 "$IMAGE"

            docker ps -f name="$CONTAINER_NAME"
            echo "Last logs:"
            docker logs --tail 50 "$CONTAINER_NAME" || true
